#!/bin/sh

# https://github.com/riksu9000/vpm

# Make sure this directory exists
BASEDIR=$HOME/.config/nvim/pack/packages

# Urls to colorschemes and packs that get loaded manually
OPT="
https://github.com/tomasiser/vim-code-dark

https://github.com/sirtaj/vim-openscad
https://github.com/alvan/vim-closetag
https://github.com/tpope/vim-surround
https://github.com/maxbane/vim-asm_ca65
https://github.com/junegunn/goyo.vim
https://github.com/bfrg/vim-cpp-modern
"

# Urls to packs that get loaded on startup
START="
https://github.com/tpope/vim-commentary
https://github.com/tpope/vim-fugitive
https://github.com/airblade/vim-gitgutter
https://github.com/timakro/vim-yadi

https://github.com/neovim/nvim-lspconfig
https://github.com/hrsh7th/nvim-cmp/
https://github.com/hrsh7th/cmp-nvim-lsp
https://github.com/hrsh7th/cmp-buffer
https://github.com/saadparwaiz1/cmp_luasnip
https://github.com/ray-x/lsp_signature.nvim

https://github.com/junegunn/fzf.vim
https://github.com/L3MON4D3/LuaSnip
https://github.com/NvChad/nvim-colorizer.lua
https://github.com/wilriker/gcode.vim
https://github.com/mphe/grayout.vim
"

set -e

ask() {
	while :
	do
		printf "\033[1m%s [y/N]\033[0m " "$@"
		read -r ANSWER
		case "$ANSWER" in
		[yY]*) return 0 ;;
		[nN]*) return 1 ;;
		"") return 1 ;;
		*) ;;
		esac
	done
}

clean() {
	PACKS=$(printf "%s\n%s" "$OPT" "$START" | xargs -l1 basename)
	ORPHANS=$(find "$BASEDIR" -maxdepth 2 -mindepth 2 -printf '%P\n'| grep -v "$PACKS" || true)
	if [ -n "$ORPHANS" ] && echo "$ORPHANS" && ask "Remove these packs?"
	then
		for pack in $ORPHANS
		do
			rm -rf "$BASEDIR/$pack"
		done
		echo "Done"
	else
		echo "Nothing to do"
	fi
}

manage() {
	# Move orphan packages to opt
	PACKS=$(echo "$START" | xargs -l1 basename)
	ORPHANS=$(find "$BASEDIR/start" -maxdepth 1 -mindepth 1 -printf '%P\n'| grep -v "$PACKS" || true)
	for pack in $ORPHANS
	do
		mv -v "$BASEDIR/start/$pack" "$BASEDIR/opt/"
	done

	for url in $OPT
	do
		BN=$(basename "$url")
		[ -d "$BASEDIR/opt/$BN" ] && continue
		[ -d "$BASEDIR/start/$BN" ] && mv -v "$BASEDIR/start/$BN" "$BASEDIR/opt/" && continue
		git clone "$url" "$BASEDIR/opt/$BN"
	done

	for url in $START
	do
		BN=$(basename "$url")
		[ -d "$BASEDIR/start/$BN" ] && continue
		[ -d "$BASEDIR/opt/$BN" ] && mv -v "$BASEDIR/opt/$BN" "$BASEDIR/start/" && continue
		git clone "$url" "$BASEDIR/start/$BN"
	done
	printf '\033[1mAll done!\033[0m\n'
}

update() {
	find "$BASEDIR" -maxdepth 3 -name '.git' -execdir sh -c 'printf "\033[1mUpdating %s: \033[0m" $(basename $(pwd))' \; -execdir git pull --ff-only \;
}

case "$1" in
-c|c*) clean ;;
-e|e*) "$EDITOR" "$0" && exit ;;
-m|m*) manage ;;
-u|u*) update ;;
"") manage ;;
-h|*) printf -- "-c clean\n-e edit\n-m manage\n-u update\n" ;;
esac
